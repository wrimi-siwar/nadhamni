#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nadhemni
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Nadhemni")]
	public partial class NadhemniDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void InsertBeautyTb(BeautyTb instance);
    partial void UpdateBeautyTb(BeautyTb instance);
    partial void DeleteBeautyTb(BeautyTb instance);
    partial void InsertBill(Bill instance);
    partial void UpdateBill(Bill instance);
    partial void DeleteBill(Bill instance);
    partial void InsertDrinkWater(DrinkWater instance);
    partial void UpdateDrinkWater(DrinkWater instance);
    partial void DeleteDrinkWater(DrinkWater instance);
    partial void InsertDrugs(Drugs instance);
    partial void UpdateDrugs(Drugs instance);
    partial void DeleteDrugs(Drugs instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertFamily(Family instance);
    partial void UpdateFamily(Family instance);
    partial void DeleteFamily(Family instance);
    partial void InsertRDV(RDV instance);
    partial void UpdateRDV(RDV instance);
    partial void DeleteRDV(RDV instance);
    partial void InsertTimeTable(TimeTable instance);
    partial void UpdateTimeTable(TimeTable instance);
    partial void DeleteTimeTable(TimeTable instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    partial void InsertDesire(Desire instance);
    partial void UpdateDesire(Desire instance);
    partial void DeleteDesire(Desire instance);
    #endregion
		
		public NadhemniDBDataContext() : 
				base(global::Nadhemni.Properties.Settings.Default.NadhemniConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public NadhemniDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NadhemniDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NadhemniDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NadhemniDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BeautyTb> BeautyTb
		{
			get
			{
				return this.GetTable<BeautyTb>();
			}
		}
		
		public System.Data.Linq.Table<Bill> Bill
		{
			get
			{
				return this.GetTable<Bill>();
			}
		}
		
		public System.Data.Linq.Table<DrinkWater> DrinkWater
		{
			get
			{
				return this.GetTable<DrinkWater>();
			}
		}
		
		public System.Data.Linq.Table<Drugs> Drugs
		{
			get
			{
				return this.GetTable<Drugs>();
			}
		}
		
		public System.Data.Linq.Table<Event> Event
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<Family> Family
		{
			get
			{
				return this.GetTable<Family>();
			}
		}
		
		public System.Data.Linq.Table<RDV> RDV
		{
			get
			{
				return this.GetTable<RDV>();
			}
		}
		
		public System.Data.Linq.Table<TimeTable> TimeTable
		{
			get
			{
				return this.GetTable<TimeTable>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<Desire> Desire
		{
			get
			{
				return this.GetTable<Desire>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BeautyTb")]
	public partial class BeautyTb : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_Beauty;
		
		private System.Nullable<int> _Id_user;
		
		private string _DayB;
		
		private System.TimeSpan _TimeB;
		
		private EntityRef<Users> _Users;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_BeautyChanging(int value);
    partial void Onid_BeautyChanged();
    partial void OnId_userChanging(System.Nullable<int> value);
    partial void OnId_userChanged();
    partial void OnDayBChanging(string value);
    partial void OnDayBChanged();
    partial void OnTimeBChanging(System.TimeSpan value);
    partial void OnTimeBChanged();
    #endregion
		
		public BeautyTb()
		{
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Beauty", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_Beauty
		{
			get
			{
				return this._id_Beauty;
			}
			set
			{
				if ((this._id_Beauty != value))
				{
					this.Onid_BeautyChanging(value);
					this.SendPropertyChanging();
					this._id_Beauty = value;
					this.SendPropertyChanged("id_Beauty");
					this.Onid_BeautyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_user", DbType="Int")]
		public System.Nullable<int> Id_user
		{
			get
			{
				return this._Id_user;
			}
			set
			{
				if ((this._Id_user != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_userChanging(value);
					this.SendPropertyChanging();
					this._Id_user = value;
					this.SendPropertyChanged("Id_user");
					this.OnId_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayB", DbType="VarChar(11) NOT NULL", CanBeNull=false)]
		public string DayB
		{
			get
			{
				return this._DayB;
			}
			set
			{
				if ((this._DayB != value))
				{
					this.OnDayBChanging(value);
					this.SendPropertyChanging();
					this._DayB = value;
					this.SendPropertyChanged("DayB");
					this.OnDayBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeB", DbType="Time NOT NULL")]
		public System.TimeSpan TimeB
		{
			get
			{
				return this._TimeB;
			}
			set
			{
				if ((this._TimeB != value))
				{
					this.OnTimeBChanging(value);
					this.SendPropertyChanging();
					this._TimeB = value;
					this.SendPropertyChanged("TimeB");
					this.OnTimeBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_BeautyTb", Storage="_Users", ThisKey="Id_user", OtherKey="Id_user", IsForeignKey=true, DeleteRule="CASCADE")]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.BeautyTb.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.BeautyTb.Add(this);
						this._Id_user = value.Id_user;
					}
					else
					{
						this._Id_user = default(Nullable<int>);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bill")]
	public partial class Bill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_Bills;
		
		private System.Nullable<int> _Id_user;
		
		private System.DateTime _DateC;
		
		private string _TypeC;
		
		private string _Beneficiary;
		
		private decimal _PreviousBalance;
		
		private decimal _Amount;
		
		private decimal _NewBalance;
		
		private EntityRef<Users> _Users;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_BillsChanging(int value);
    partial void Onid_BillsChanged();
    partial void OnId_userChanging(System.Nullable<int> value);
    partial void OnId_userChanged();
    partial void OnDateCChanging(System.DateTime value);
    partial void OnDateCChanged();
    partial void OnTypeCChanging(string value);
    partial void OnTypeCChanged();
    partial void OnBeneficiaryChanging(string value);
    partial void OnBeneficiaryChanged();
    partial void OnPreviousBalanceChanging(decimal value);
    partial void OnPreviousBalanceChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnNewBalanceChanging(decimal value);
    partial void OnNewBalanceChanged();
    #endregion
		
		public Bill()
		{
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Bills", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_Bills
		{
			get
			{
				return this._id_Bills;
			}
			set
			{
				if ((this._id_Bills != value))
				{
					this.Onid_BillsChanging(value);
					this.SendPropertyChanging();
					this._id_Bills = value;
					this.SendPropertyChanged("id_Bills");
					this.Onid_BillsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_user", DbType="Int")]
		public System.Nullable<int> Id_user
		{
			get
			{
				return this._Id_user;
			}
			set
			{
				if ((this._Id_user != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_userChanging(value);
					this.SendPropertyChanging();
					this._Id_user = value;
					this.SendPropertyChanged("Id_user");
					this.OnId_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateC", DbType="Date NOT NULL")]
		public System.DateTime DateC
		{
			get
			{
				return this._DateC;
			}
			set
			{
				if ((this._DateC != value))
				{
					this.OnDateCChanging(value);
					this.SendPropertyChanging();
					this._DateC = value;
					this.SendPropertyChanged("DateC");
					this.OnDateCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeC", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeC
		{
			get
			{
				return this._TypeC;
			}
			set
			{
				if ((this._TypeC != value))
				{
					this.OnTypeCChanging(value);
					this.SendPropertyChanging();
					this._TypeC = value;
					this.SendPropertyChanged("TypeC");
					this.OnTypeCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Beneficiary", DbType="VarChar(50)")]
		public string Beneficiary
		{
			get
			{
				return this._Beneficiary;
			}
			set
			{
				if ((this._Beneficiary != value))
				{
					this.OnBeneficiaryChanging(value);
					this.SendPropertyChanging();
					this._Beneficiary = value;
					this.SendPropertyChanged("Beneficiary");
					this.OnBeneficiaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousBalance", DbType="Decimal(18,0) NOT NULL")]
		public decimal PreviousBalance
		{
			get
			{
				return this._PreviousBalance;
			}
			set
			{
				if ((this._PreviousBalance != value))
				{
					this.OnPreviousBalanceChanging(value);
					this.SendPropertyChanging();
					this._PreviousBalance = value;
					this.SendPropertyChanged("PreviousBalance");
					this.OnPreviousBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,0) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewBalance", DbType="Decimal(18,0) NOT NULL")]
		public decimal NewBalance
		{
			get
			{
				return this._NewBalance;
			}
			set
			{
				if ((this._NewBalance != value))
				{
					this.OnNewBalanceChanging(value);
					this.SendPropertyChanging();
					this._NewBalance = value;
					this.SendPropertyChanged("NewBalance");
					this.OnNewBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Bill", Storage="_Users", ThisKey="Id_user", OtherKey="Id_user", IsForeignKey=true, DeleteRule="CASCADE")]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Bill.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Bill.Add(this);
						this._Id_user = value.Id_user;
					}
					else
					{
						this._Id_user = default(Nullable<int>);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrinkWater")]
	public partial class DrinkWater : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_water;
		
		private int _Id_user;
		
		private decimal _Quantity;
		
		private int _PeriodDrink;
		
		private EntityRef<Users> _Users;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_waterChanging(int value);
    partial void OnId_waterChanged();
    partial void OnId_userChanging(int value);
    partial void OnId_userChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnPeriodDrinkChanging(int value);
    partial void OnPeriodDrinkChanged();
    #endregion
		
		public DrinkWater()
		{
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_water", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_water
		{
			get
			{
				return this._Id_water;
			}
			set
			{
				if ((this._Id_water != value))
				{
					this.OnId_waterChanging(value);
					this.SendPropertyChanging();
					this._Id_water = value;
					this.SendPropertyChanged("Id_water");
					this.OnId_waterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_user", DbType="Int NOT NULL")]
		public int Id_user
		{
			get
			{
				return this._Id_user;
			}
			set
			{
				if ((this._Id_user != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_userChanging(value);
					this.SendPropertyChanging();
					this._Id_user = value;
					this.SendPropertyChanged("Id_user");
					this.OnId_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(15,3) NOT NULL")]
		public decimal Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodDrink", DbType="Int NOT NULL")]
		public int PeriodDrink
		{
			get
			{
				return this._PeriodDrink;
			}
			set
			{
				if ((this._PeriodDrink != value))
				{
					this.OnPeriodDrinkChanging(value);
					this.SendPropertyChanging();
					this._PeriodDrink = value;
					this.SendPropertyChanged("PeriodDrink");
					this.OnPeriodDrinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_DrinkWater", Storage="_Users", ThisKey="Id_user", OtherKey="Id_user", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.DrinkWater.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.DrinkWater.Add(this);
						this._Id_user = value.Id_user;
					}
					else
					{
						this._Id_user = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Drugs")]
	public partial class Drugs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_Drugs;
		
		private int _id_user;
		
		private int _Id_Family;
		
		private string _Period;
		
		private EntityRef<Family> _Family;
		
		private EntityRef<Users> _Users;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_DrugsChanging(int value);
    partial void OnId_DrugsChanged();
    partial void Onid_userChanging(int value);
    partial void Onid_userChanged();
    partial void OnId_FamilyChanging(int value);
    partial void OnId_FamilyChanged();
    partial void OnPeriodChanging(string value);
    partial void OnPeriodChanged();
    #endregion
		
		public Drugs()
		{
			this._Family = default(EntityRef<Family>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Drugs", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_Drugs
		{
			get
			{
				return this._Id_Drugs;
			}
			set
			{
				if ((this._Id_Drugs != value))
				{
					this.OnId_DrugsChanging(value);
					this.SendPropertyChanging();
					this._Id_Drugs = value;
					this.SendPropertyChanged("Id_Drugs");
					this.OnId_DrugsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_user", DbType="Int NOT NULL")]
		public int id_user
		{
			get
			{
				return this._id_user;
			}
			set
			{
				if ((this._id_user != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_userChanging(value);
					this.SendPropertyChanging();
					this._id_user = value;
					this.SendPropertyChanged("id_user");
					this.Onid_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Family", DbType="Int NOT NULL")]
		public int Id_Family
		{
			get
			{
				return this._Id_Family;
			}
			set
			{
				if ((this._Id_Family != value))
				{
					if (this._Family.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_FamilyChanging(value);
					this.SendPropertyChanging();
					this._Id_Family = value;
					this.SendPropertyChanged("Id_Family");
					this.OnId_FamilyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Period", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Period
		{
			get
			{
				return this._Period;
			}
			set
			{
				if ((this._Period != value))
				{
					this.OnPeriodChanging(value);
					this.SendPropertyChanging();
					this._Period = value;
					this.SendPropertyChanged("Period");
					this.OnPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Family_Drugs", Storage="_Family", ThisKey="Id_Family", OtherKey="id_Family", IsForeignKey=true)]
		public Family Family
		{
			get
			{
				return this._Family.Entity;
			}
			set
			{
				Family previousValue = this._Family.Entity;
				if (((previousValue != value) 
							|| (this._Family.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Family.Entity = null;
						previousValue.Drugs.Remove(this);
					}
					this._Family.Entity = value;
					if ((value != null))
					{
						value.Drugs.Add(this);
						this._Id_Family = value.id_Family;
					}
					else
					{
						this._Id_Family = default(int);
					}
					this.SendPropertyChanged("Family");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Drugs", Storage="_Users", ThisKey="id_user", OtherKey="Id_user", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Drugs.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Drugs.Add(this);
						this._id_user = value.Id_user;
					}
					else
					{
						this._id_user = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Event")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_Event;
		
		private System.Nullable<int> _Id_user;
		
		private System.DateTime _DateEvent;
		
		private string _Titre;
		
		private string _Organiser;
		
		private string _Country;
		
		private string _Address;
		
		private string _Type;
		
		private EntityRef<Users> _Users;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_EventChanging(int value);
    partial void OnId_EventChanged();
    partial void OnId_userChanging(System.Nullable<int> value);
    partial void OnId_userChanged();
    partial void OnDateEventChanging(System.DateTime value);
    partial void OnDateEventChanged();
    partial void OnTitreChanging(string value);
    partial void OnTitreChanged();
    partial void OnOrganiserChanging(string value);
    partial void OnOrganiserChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public Event()
		{
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Event", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_Event
		{
			get
			{
				return this._Id_Event;
			}
			set
			{
				if ((this._Id_Event != value))
				{
					this.OnId_EventChanging(value);
					this.SendPropertyChanging();
					this._Id_Event = value;
					this.SendPropertyChanged("Id_Event");
					this.OnId_EventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_user", DbType="Int")]
		public System.Nullable<int> Id_user
		{
			get
			{
				return this._Id_user;
			}
			set
			{
				if ((this._Id_user != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_userChanging(value);
					this.SendPropertyChanging();
					this._Id_user = value;
					this.SendPropertyChanged("Id_user");
					this.OnId_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEvent", DbType="Date NOT NULL")]
		public System.DateTime DateEvent
		{
			get
			{
				return this._DateEvent;
			}
			set
			{
				if ((this._DateEvent != value))
				{
					this.OnDateEventChanging(value);
					this.SendPropertyChanging();
					this._DateEvent = value;
					this.SendPropertyChanged("DateEvent");
					this.OnDateEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Titre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Titre
		{
			get
			{
				return this._Titre;
			}
			set
			{
				if ((this._Titre != value))
				{
					this.OnTitreChanging(value);
					this.SendPropertyChanging();
					this._Titre = value;
					this.SendPropertyChanged("Titre");
					this.OnTitreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Organiser", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Organiser
		{
			get
			{
				return this._Organiser;
			}
			set
			{
				if ((this._Organiser != value))
				{
					this.OnOrganiserChanging(value);
					this.SendPropertyChanging();
					this._Organiser = value;
					this.SendPropertyChanged("Organiser");
					this.OnOrganiserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Event", Storage="_Users", ThisKey="Id_user", OtherKey="Id_user", IsForeignKey=true, DeleteRule="CASCADE")]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Event.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Event.Add(this);
						this._Id_user = value.Id_user;
					}
					else
					{
						this._Id_user = default(Nullable<int>);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Family")]
	public partial class Family : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_Family;
		
		private System.Nullable<int> _Id_user;
		
		private string _FamilyMember;
		
		private string _Name;
		
		private System.DateTime _Dbrth;
		
		private EntitySet<Drugs> _Drugs;
		
		private EntitySet<RDV> _RDV;
		
		private EntitySet<TimeTable> _TimeTable;
		
		private EntityRef<Users> _Users;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_FamilyChanging(int value);
    partial void Onid_FamilyChanged();
    partial void OnId_userChanging(System.Nullable<int> value);
    partial void OnId_userChanged();
    partial void OnFamilyMemberChanging(string value);
    partial void OnFamilyMemberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDbrthChanging(System.DateTime value);
    partial void OnDbrthChanged();
    #endregion
		
		public Family()
		{
			this._Drugs = new EntitySet<Drugs>(new Action<Drugs>(this.attach_Drugs), new Action<Drugs>(this.detach_Drugs));
			this._RDV = new EntitySet<RDV>(new Action<RDV>(this.attach_RDV), new Action<RDV>(this.detach_RDV));
			this._TimeTable = new EntitySet<TimeTable>(new Action<TimeTable>(this.attach_TimeTable), new Action<TimeTable>(this.detach_TimeTable));
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Family", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_Family
		{
			get
			{
				return this._id_Family;
			}
			set
			{
				if ((this._id_Family != value))
				{
					this.Onid_FamilyChanging(value);
					this.SendPropertyChanging();
					this._id_Family = value;
					this.SendPropertyChanged("id_Family");
					this.Onid_FamilyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_user", DbType="Int")]
		public System.Nullable<int> Id_user
		{
			get
			{
				return this._Id_user;
			}
			set
			{
				if ((this._Id_user != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_userChanging(value);
					this.SendPropertyChanging();
					this._Id_user = value;
					this.SendPropertyChanged("Id_user");
					this.OnId_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FamilyMember", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FamilyMember
		{
			get
			{
				return this._FamilyMember;
			}
			set
			{
				if ((this._FamilyMember != value))
				{
					this.OnFamilyMemberChanging(value);
					this.SendPropertyChanging();
					this._FamilyMember = value;
					this.SendPropertyChanged("FamilyMember");
					this.OnFamilyMemberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dbrth", DbType="Date NOT NULL")]
		public System.DateTime Dbrth
		{
			get
			{
				return this._Dbrth;
			}
			set
			{
				if ((this._Dbrth != value))
				{
					this.OnDbrthChanging(value);
					this.SendPropertyChanging();
					this._Dbrth = value;
					this.SendPropertyChanged("Dbrth");
					this.OnDbrthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Family_Drugs", Storage="_Drugs", ThisKey="id_Family", OtherKey="Id_Family")]
		public EntitySet<Drugs> Drugs
		{
			get
			{
				return this._Drugs;
			}
			set
			{
				this._Drugs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Family_RDV", Storage="_RDV", ThisKey="id_Family", OtherKey="Id_Family")]
		public EntitySet<RDV> RDV
		{
			get
			{
				return this._RDV;
			}
			set
			{
				this._RDV.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Family_TimeTable", Storage="_TimeTable", ThisKey="id_Family", OtherKey="Id_Family")]
		public EntitySet<TimeTable> TimeTable
		{
			get
			{
				return this._TimeTable;
			}
			set
			{
				this._TimeTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Family", Storage="_Users", ThisKey="Id_user", OtherKey="Id_user", IsForeignKey=true, DeleteRule="CASCADE")]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Family.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Family.Add(this);
						this._Id_user = value.Id_user;
					}
					else
					{
						this._Id_user = default(Nullable<int>);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Drugs(Drugs entity)
		{
			this.SendPropertyChanging();
			entity.Family = this;
		}
		
		private void detach_Drugs(Drugs entity)
		{
			this.SendPropertyChanging();
			entity.Family = null;
		}
		
		private void attach_RDV(RDV entity)
		{
			this.SendPropertyChanging();
			entity.Family = this;
		}
		
		private void detach_RDV(RDV entity)
		{
			this.SendPropertyChanging();
			entity.Family = null;
		}
		
		private void attach_TimeTable(TimeTable entity)
		{
			this.SendPropertyChanging();
			entity.Family = this;
		}
		
		private void detach_TimeTable(TimeTable entity)
		{
			this.SendPropertyChanging();
			entity.Family = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RDV")]
	public partial class RDV : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_RDV;
		
		private int _id_user;
		
		private int _Id_Family;
		
		private System.DateTime _DateRDV;
		
		private EntityRef<Family> _Family;
		
		private EntityRef<Users> _Users;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_RDVChanging(int value);
    partial void OnId_RDVChanged();
    partial void Onid_userChanging(int value);
    partial void Onid_userChanged();
    partial void OnId_FamilyChanging(int value);
    partial void OnId_FamilyChanged();
    partial void OnDateRDVChanging(System.DateTime value);
    partial void OnDateRDVChanged();
    #endregion
		
		public RDV()
		{
			this._Family = default(EntityRef<Family>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_RDV", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_RDV
		{
			get
			{
				return this._Id_RDV;
			}
			set
			{
				if ((this._Id_RDV != value))
				{
					this.OnId_RDVChanging(value);
					this.SendPropertyChanging();
					this._Id_RDV = value;
					this.SendPropertyChanged("Id_RDV");
					this.OnId_RDVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_user", DbType="Int NOT NULL")]
		public int id_user
		{
			get
			{
				return this._id_user;
			}
			set
			{
				if ((this._id_user != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_userChanging(value);
					this.SendPropertyChanging();
					this._id_user = value;
					this.SendPropertyChanged("id_user");
					this.Onid_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Family", DbType="Int NOT NULL")]
		public int Id_Family
		{
			get
			{
				return this._Id_Family;
			}
			set
			{
				if ((this._Id_Family != value))
				{
					if (this._Family.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_FamilyChanging(value);
					this.SendPropertyChanging();
					this._Id_Family = value;
					this.SendPropertyChanged("Id_Family");
					this.OnId_FamilyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateRDV", DbType="DateTime NOT NULL")]
		public System.DateTime DateRDV
		{
			get
			{
				return this._DateRDV;
			}
			set
			{
				if ((this._DateRDV != value))
				{
					this.OnDateRDVChanging(value);
					this.SendPropertyChanging();
					this._DateRDV = value;
					this.SendPropertyChanged("DateRDV");
					this.OnDateRDVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Family_RDV", Storage="_Family", ThisKey="Id_Family", OtherKey="id_Family", IsForeignKey=true)]
		public Family Family
		{
			get
			{
				return this._Family.Entity;
			}
			set
			{
				Family previousValue = this._Family.Entity;
				if (((previousValue != value) 
							|| (this._Family.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Family.Entity = null;
						previousValue.RDV.Remove(this);
					}
					this._Family.Entity = value;
					if ((value != null))
					{
						value.RDV.Add(this);
						this._Id_Family = value.id_Family;
					}
					else
					{
						this._Id_Family = default(int);
					}
					this.SendPropertyChanged("Family");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_RDV", Storage="_Users", ThisKey="id_user", OtherKey="Id_user", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.RDV.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.RDV.Add(this);
						this._id_user = value.Id_user;
					}
					else
					{
						this._id_user = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TimeTable")]
	public partial class TimeTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_TimeTable;
		
		private System.Nullable<int> _id_user;
		
		private System.Nullable<int> _Id_Family;
		
		private System.DateTime _day;
		
		private System.TimeSpan _StartTime;
		
		private System.TimeSpan _EndTime;
		
		private string _content;
		
		private EntityRef<Family> _Family;
		
		private EntityRef<Users> _Users;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_TimeTableChanging(int value);
    partial void OnId_TimeTableChanged();
    partial void Onid_userChanging(System.Nullable<int> value);
    partial void Onid_userChanged();
    partial void OnId_FamilyChanging(System.Nullable<int> value);
    partial void OnId_FamilyChanged();
    partial void OndayChanging(System.DateTime value);
    partial void OndayChanged();
    partial void OnStartTimeChanging(System.TimeSpan value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.TimeSpan value);
    partial void OnEndTimeChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    #endregion
		
		public TimeTable()
		{
			this._Family = default(EntityRef<Family>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_TimeTable", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_TimeTable
		{
			get
			{
				return this._Id_TimeTable;
			}
			set
			{
				if ((this._Id_TimeTable != value))
				{
					this.OnId_TimeTableChanging(value);
					this.SendPropertyChanging();
					this._Id_TimeTable = value;
					this.SendPropertyChanged("Id_TimeTable");
					this.OnId_TimeTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_user", DbType="Int")]
		public System.Nullable<int> id_user
		{
			get
			{
				return this._id_user;
			}
			set
			{
				if ((this._id_user != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_userChanging(value);
					this.SendPropertyChanging();
					this._id_user = value;
					this.SendPropertyChanged("id_user");
					this.Onid_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Family", DbType="Int")]
		public System.Nullable<int> Id_Family
		{
			get
			{
				return this._Id_Family;
			}
			set
			{
				if ((this._Id_Family != value))
				{
					if (this._Family.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_FamilyChanging(value);
					this.SendPropertyChanging();
					this._Id_Family = value;
					this.SendPropertyChanged("Id_Family");
					this.OnId_FamilyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_day", DbType="Date NOT NULL")]
		public System.DateTime day
		{
			get
			{
				return this._day;
			}
			set
			{
				if ((this._day != value))
				{
					this.OndayChanging(value);
					this.SendPropertyChanging();
					this._day = value;
					this.SendPropertyChanged("day");
					this.OndayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Time NOT NULL")]
		public System.TimeSpan StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="Time NOT NULL")]
		public System.TimeSpan EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Family_TimeTable", Storage="_Family", ThisKey="Id_Family", OtherKey="id_Family", IsForeignKey=true)]
		public Family Family
		{
			get
			{
				return this._Family.Entity;
			}
			set
			{
				Family previousValue = this._Family.Entity;
				if (((previousValue != value) 
							|| (this._Family.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Family.Entity = null;
						previousValue.TimeTable.Remove(this);
					}
					this._Family.Entity = value;
					if ((value != null))
					{
						value.TimeTable.Add(this);
						this._Id_Family = value.id_Family;
					}
					else
					{
						this._Id_Family = default(Nullable<int>);
					}
					this.SendPropertyChanged("Family");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_TimeTable", Storage="_Users", ThisKey="id_user", OtherKey="Id_user", IsForeignKey=true, DeleteRule="CASCADE")]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.TimeTable.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.TimeTable.Add(this);
						this._id_user = value.Id_user;
					}
					else
					{
						this._id_user = default(Nullable<int>);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_user;
		
		private string _Login;
		
		private string _Password;
		
		private string _LastName;
		
		private string _FirstName;
		
		private System.DateTime _DBth;
		
		private string _Profession;
		
		private string _Gender;
		
		private string _Situation;
		
		private string _Address;
		
		private string _Email;
		
		private string _ProfilePicture;
		
		private string _Country;
		
		private string _City;
		
		private string _Phone;
		
		private EntitySet<BeautyTb> _BeautyTb;
		
		private EntitySet<Bill> _Bill;
		
		private EntitySet<DrinkWater> _DrinkWater;
		
		private EntitySet<Drugs> _Drugs;
		
		private EntitySet<Event> _Event;
		
		private EntitySet<Family> _Family;
		
		private EntitySet<RDV> _RDV;
		
		private EntitySet<TimeTable> _TimeTable;
		
		private EntitySet<Desire> _Desire;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_userChanging(int value);
    partial void OnId_userChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnDBthChanging(System.DateTime value);
    partial void OnDBthChanged();
    partial void OnProfessionChanging(string value);
    partial void OnProfessionChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnSituationChanging(string value);
    partial void OnSituationChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnProfilePictureChanging(string value);
    partial void OnProfilePictureChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
		
		public Users()
		{
			this._BeautyTb = new EntitySet<BeautyTb>(new Action<BeautyTb>(this.attach_BeautyTb), new Action<BeautyTb>(this.detach_BeautyTb));
			this._Bill = new EntitySet<Bill>(new Action<Bill>(this.attach_Bill), new Action<Bill>(this.detach_Bill));
			this._DrinkWater = new EntitySet<DrinkWater>(new Action<DrinkWater>(this.attach_DrinkWater), new Action<DrinkWater>(this.detach_DrinkWater));
			this._Drugs = new EntitySet<Drugs>(new Action<Drugs>(this.attach_Drugs), new Action<Drugs>(this.detach_Drugs));
			this._Event = new EntitySet<Event>(new Action<Event>(this.attach_Event), new Action<Event>(this.detach_Event));
			this._Family = new EntitySet<Family>(new Action<Family>(this.attach_Family), new Action<Family>(this.detach_Family));
			this._RDV = new EntitySet<RDV>(new Action<RDV>(this.attach_RDV), new Action<RDV>(this.detach_RDV));
			this._TimeTable = new EntitySet<TimeTable>(new Action<TimeTable>(this.attach_TimeTable), new Action<TimeTable>(this.detach_TimeTable));
			this._Desire = new EntitySet<Desire>(new Action<Desire>(this.attach_Desire), new Action<Desire>(this.detach_Desire));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_user", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_user
		{
			get
			{
				return this._Id_user;
			}
			set
			{
				if ((this._Id_user != value))
				{
					this.OnId_userChanging(value);
					this.SendPropertyChanging();
					this._Id_user = value;
					this.SendPropertyChanged("Id_user");
					this.OnId_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DBth", DbType="Date NOT NULL")]
		public System.DateTime DBth
		{
			get
			{
				return this._DBth;
			}
			set
			{
				if ((this._DBth != value))
				{
					this.OnDBthChanging(value);
					this.SendPropertyChanging();
					this._DBth = value;
					this.SendPropertyChanged("DBth");
					this.OnDBthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Profession", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Profession
		{
			get
			{
				return this._Profession;
			}
			set
			{
				if ((this._Profession != value))
				{
					this.OnProfessionChanging(value);
					this.SendPropertyChanging();
					this._Profession = value;
					this.SendPropertyChanged("Profession");
					this.OnProfessionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Situation", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Situation
		{
			get
			{
				return this._Situation;
			}
			set
			{
				if ((this._Situation != value))
				{
					this.OnSituationChanging(value);
					this.SendPropertyChanging();
					this._Situation = value;
					this.SendPropertyChanged("Situation");
					this.OnSituationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfilePicture", DbType="VarChar(70)")]
		public string ProfilePicture
		{
			get
			{
				return this._ProfilePicture;
			}
			set
			{
				if ((this._ProfilePicture != value))
				{
					this.OnProfilePictureChanging(value);
					this.SendPropertyChanging();
					this._ProfilePicture = value;
					this.SendPropertyChanged("ProfilePicture");
					this.OnProfilePictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_BeautyTb", Storage="_BeautyTb", ThisKey="Id_user", OtherKey="Id_user")]
		public EntitySet<BeautyTb> BeautyTb
		{
			get
			{
				return this._BeautyTb;
			}
			set
			{
				this._BeautyTb.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Bill", Storage="_Bill", ThisKey="Id_user", OtherKey="Id_user")]
		public EntitySet<Bill> Bill
		{
			get
			{
				return this._Bill;
			}
			set
			{
				this._Bill.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_DrinkWater", Storage="_DrinkWater", ThisKey="Id_user", OtherKey="Id_user")]
		public EntitySet<DrinkWater> DrinkWater
		{
			get
			{
				return this._DrinkWater;
			}
			set
			{
				this._DrinkWater.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Drugs", Storage="_Drugs", ThisKey="Id_user", OtherKey="id_user")]
		public EntitySet<Drugs> Drugs
		{
			get
			{
				return this._Drugs;
			}
			set
			{
				this._Drugs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Event", Storage="_Event", ThisKey="Id_user", OtherKey="Id_user")]
		public EntitySet<Event> Event
		{
			get
			{
				return this._Event;
			}
			set
			{
				this._Event.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Family", Storage="_Family", ThisKey="Id_user", OtherKey="Id_user")]
		public EntitySet<Family> Family
		{
			get
			{
				return this._Family;
			}
			set
			{
				this._Family.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_RDV", Storage="_RDV", ThisKey="Id_user", OtherKey="id_user")]
		public EntitySet<RDV> RDV
		{
			get
			{
				return this._RDV;
			}
			set
			{
				this._RDV.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_TimeTable", Storage="_TimeTable", ThisKey="Id_user", OtherKey="id_user")]
		public EntitySet<TimeTable> TimeTable
		{
			get
			{
				return this._TimeTable;
			}
			set
			{
				this._TimeTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Desire", Storage="_Desire", ThisKey="Id_user", OtherKey="Id_user")]
		public EntitySet<Desire> Desire
		{
			get
			{
				return this._Desire;
			}
			set
			{
				this._Desire.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BeautyTb(BeautyTb entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_BeautyTb(BeautyTb entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Bill(Bill entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Bill(Bill entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_DrinkWater(DrinkWater entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_DrinkWater(DrinkWater entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Drugs(Drugs entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Drugs(Drugs entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Event(Event entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Event(Event entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Family(Family entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Family(Family entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_RDV(RDV entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_RDV(RDV entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_TimeTable(TimeTable entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_TimeTable(TimeTable entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Desire(Desire entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Desire(Desire entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Desire")]
	public partial class Desire : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_Desire;
		
		private System.Nullable<int> _Id_user;
		
		private string _Choice;
		
		private decimal _Cost;
		
		private decimal _Savings;
		
		private System.DateTime _Deadline;
		
		private string _Frequency;
		
		private EntityRef<Users> _Users;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_DesireChanging(int value);
    partial void Onid_DesireChanged();
    partial void OnId_userChanging(System.Nullable<int> value);
    partial void OnId_userChanged();
    partial void OnChoiceChanging(string value);
    partial void OnChoiceChanged();
    partial void OnCostChanging(decimal value);
    partial void OnCostChanged();
    partial void OnSavingsChanging(decimal value);
    partial void OnSavingsChanged();
    partial void OnDeadlineChanging(System.DateTime value);
    partial void OnDeadlineChanged();
    partial void OnFrequencyChanging(string value);
    partial void OnFrequencyChanged();
    #endregion
		
		public Desire()
		{
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Desire", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_Desire
		{
			get
			{
				return this._id_Desire;
			}
			set
			{
				if ((this._id_Desire != value))
				{
					this.Onid_DesireChanging(value);
					this.SendPropertyChanging();
					this._id_Desire = value;
					this.SendPropertyChanged("id_Desire");
					this.Onid_DesireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_user", DbType="Int")]
		public System.Nullable<int> Id_user
		{
			get
			{
				return this._Id_user;
			}
			set
			{
				if ((this._Id_user != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_userChanging(value);
					this.SendPropertyChanging();
					this._Id_user = value;
					this.SendPropertyChanged("Id_user");
					this.OnId_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Choice", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Choice
		{
			get
			{
				return this._Choice;
			}
			set
			{
				if ((this._Choice != value))
				{
					this.OnChoiceChanging(value);
					this.SendPropertyChanging();
					this._Choice = value;
					this.SendPropertyChanged("Choice");
					this.OnChoiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Decimal(20,3) NOT NULL")]
		public decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Savings", DbType="Decimal(20,3) NOT NULL")]
		public decimal Savings
		{
			get
			{
				return this._Savings;
			}
			set
			{
				if ((this._Savings != value))
				{
					this.OnSavingsChanging(value);
					this.SendPropertyChanging();
					this._Savings = value;
					this.SendPropertyChanged("Savings");
					this.OnSavingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deadline", DbType="Date NOT NULL")]
		public System.DateTime Deadline
		{
			get
			{
				return this._Deadline;
			}
			set
			{
				if ((this._Deadline != value))
				{
					this.OnDeadlineChanging(value);
					this.SendPropertyChanging();
					this._Deadline = value;
					this.SendPropertyChanged("Deadline");
					this.OnDeadlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Frequency", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Frequency
		{
			get
			{
				return this._Frequency;
			}
			set
			{
				if ((this._Frequency != value))
				{
					this.OnFrequencyChanging(value);
					this.SendPropertyChanging();
					this._Frequency = value;
					this.SendPropertyChanged("Frequency");
					this.OnFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Desire", Storage="_Users", ThisKey="Id_user", OtherKey="Id_user", IsForeignKey=true, DeleteRule="CASCADE")]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Desire.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Desire.Add(this);
						this._Id_user = value.Id_user;
					}
					else
					{
						this._Id_user = default(Nullable<int>);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
